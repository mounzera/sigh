//Basic template param test
/*template <typename T, typename T1>
fun check_param (r: T, a: T1, b: Int, c: T){
    print(a)
}
check_param<Int, String>(2, "hey", 2, 2);
//check_param<Int, String>(2, "hey", 2, 2);

template <typename T,typename T1>
fun check_param1 (x: T, y: T1) :T{
    print(y)
    return 2
}
//check_param1<Int, Int>(2, 3);
//check_param<Int, String>(2, "hey", 2, 1);
check_param1<Int, String>(2, "hey");

//no template test (if what already existed is still working)
fun check_param_no_template ( a: String, c: Int, b: Int){
    print(a)
}

//Basic template but not used in the function
template <typename T>
fun check_param_template_not_used ( a: String, c: Int, b: Int){
    print(a)
}

//Template with multiple parameters
template <typename T, typename T1>
fun check_param_multiple_template( a: T, c: T1, b: Int){
}
check_param_multiple_template<String, Int>("hey", 2, 3);*/

/*var intArray: Int[] = [5]
fun array_print_int(x: Int[]){
    print("" + x[0])
}
array_print_int(intArray)*/

/*template <typename T, typename T1>
fun array_print(b: T1, a: T){

}
array_print<Int, Int>(3, 2)*/

/*var tempArray: T1[] = []
var tempArray: T1[] = [6]*/

/*template<typename T, typename T1>
fun array_print(x: T, a: T1): T{
    print(x)
    print(a)
    return a
}
//var intArray: Int[] = [5]
array_print<Int, Int>(2, 3)*/

//Test of binary operation with templates
/*template<typename T1, typename T, typename T2>
fun array_print2(a: T, x: T1, b: T2, c: Int): String{
    print("" + x)
    print("" + b)
    var test: Float = x / b
    print(test + "")
    print("" + a + c)
    return "" + b
}*/
//array_print2<Float, String, Float>("hey", 3.0, 2.0, 6)
//print(array_print2<Float>(3.5))
/*template<typename T, typename T1>
fun max(a: T, b: T1): T{
    if(a > b){
        return a
    }else{
        return b
    }
}
print("" + max<Float, Int>(4.5, 3))*/
//var test: Bool = 6 == 4

//Test of var decl + var assignement
/*template<typename T>
fun assign(a: T){
    var b : Int = 1
    b = a
}
assign<Int>(2)*/

/*var arr : Template[] = [5, "Marie"]
print("" + arr)

var arrInt: Int[] = [5]
var arrInt2: Int[] = [1]*/
//var res: Int = arrInt@<+>arrInt2

/*fun test(a: String): String{
    return a
}
print(test("2"))
test("3")*/