//Basic template param test
template <typename T, typename T1>
fun check_param (r: T, a: T1, b: Int, c: T){
    print(a + "")
}
check_param<Int, String>(2, "hey", 2, 2);
check_param<Float, Int>(2.3, 4, 4, 8.4);
/*check_param<Int, String>(2, "hey", 2, 2);

template <typename T,typename T1>
fun check_param1 (x: T, y: T1) :T{
    print(y)
    return 2
}
//check_param1<Int, Int>(2, 3);
//check_param<Int, String>(2, "hey", 2, 1);
check_param1<Int, String>(2, "hey");

//no template test (if what already existed is still working)
fun check_param_no_template ( a: String, c: Int, b: Int){
    print(a)
}

//Basic template but not used in the function
template <typename T>
fun check_param_template_not_used ( a: String, c: Int, b: Int){
    print(a)
}

//Template with multiple parameters
template <typename T, typename T1>
fun check_param_multiple_template( a: T, c: T1, b: Int){
}
check_param_multiple_template<String, Int>("hey", 2, 3);*/

/*var intArray: Int[] = [5]
fun array_print_int(x: Int[]){
    print("" + x[0])
}
array_print_int(intArray)*/

/*template <typename T, typename T1>
fun array_print(b: T1, a: T){

}
array_print<Int, Int>(3, 2)*/

/*var tempArray: T1[] = []
var tempArray: T1[] = [6]*/

/*template<typename T, typename T1>
fun array_print(x: T, a: T1): T{
    print(x)
    print(a)
    return a
}
//var intArray: Int[] = [5]
array_print<Int, Int>(2, 3)*/

//Test of binary operation with templates
/*template<typename T1, typename T, typename T2>
fun array_print2(a: T, x: T1, b: T2, c: Int): String{
    print("" + x)
    print("" + b)
    var test: Float = x / b
    print(test + "")
    print("" + a + c)
    return "" + b
}*/
//var stringArr: String[] = ["hey"]
//array_print2<Float, String, Float>("hey", 3.0, 2.0, 6)
//print(array_print2<Float>(3.5))
/*template<typename T, typename T1>
fun max(a: T, b: T1): T{
    if(a > b){
        return a
    }else{
        return b
    }
}
print("" + max<Float, Int>(4.5, 3))*/
//var test: Bool = 6 == 4

//Test of var decl + var assignement
/*template<typename T, typename T1>
fun assign(a: T, b: T1){
    a = 3
    a = a + 1
    var c : Float = a + 1
    print(a)
}
assign<Int, Float>(2, 3.0)
assign<Float, Int>(4.0, 5)*/

/*var arr : Template[] = [5, "Marie"]
var arr2 : Template[]= [5.0, "Hello"]
var arr3: Template[]=arr@(+)arr2
print("" + arr3)
print("" +arr2)*/
/*var arr: Int[] = [1]
print("" + arr)
arr=[3]
print("" + arr)*/


/*var arrInt: Float[] = [5.0,2]
var arrInt2: Float[] = [2.0,2]
var arr3: Bool[] = [true]

var arr4: String[] =["hello "]
var arr5: String[] =["everybody"]
var res2: String[] = arr4@(+)arr5
var i1: Int =5
var i2:Int=1
print("" + arr5)
print(""+res2) // print hello everybody2
print(""+ (i1 +i2)) //print 6

var arr5: String[] =["everybody2"]
var res3: String[] = arr4@(+)arr5
var i1: Int = 6
print(""+arr5)
print(""+res3) //print hello everybody2
print(""+(i1+i2))// print 7*/


//var res: Bool[] = arrInt@(>=)arrInt2
/*var a: Int=1
var b: Int =2
var res2 : Int = a+b*/


//Test of the return stmt with template -> semantic working, not interpretor
/*template<typename T, typename T1>
fun ret(a: T, c: T1): T{
    var b: String = "hey"
    return a + 1
}
ret<Int, String>(2, "hey")*/


//Test of if stmt with template
/*template<typename T>
fun cond(a: T){*/
    /*if(a > 6){
        print(a)
    }*/

    /*if(a > 6){
        print("hey")
    }
}
cond<Int>(7)
cond<Float>(6.6)*/

//Test of while stmt template
/*template<typename T>
fun loop(a: T){
    while(a < 8){
        print(a)
        a = a + 1
    }
}
loop<Int>(5)
loop<Float>(4.7)*/


/*fun test(a: String): String{
    return a
}
print(test("2"))
test("3")*/

//Array operation test
/*var arr10 : Int[] = [1,2]
var arr20 : Float[]= [2.0, 3.0]
var arr30: Bool[]=arr10@(>)arr20
print("111" + arr10)
print("222" + arr30)*/
var arr10 : Bool[] = [true]
var arr20 : Bool[]= [false]
var arr30: Bool[]=arr10@(&&)arr20
print("111" + arr10)
print("222" + arr30)

//Template array test
/*var arr10 : Template[] = [1.0, "Hello"]
var arr20 : Template[]= [2, " everybody"]
var arr30: Template[]=arr10@(>)arr20
print("111" + arr10)
print("222" + arr30)*/
/*var arr10 : Template[] = [1.0, "Hello"]
var arr20 : Template[]= [2, " everybody"]
var arr40 : Template[] = [3, " !"]
var arr30: Template[]=arr10@(+)arr20@(+)arr40
print("111" + arr10)
print("222" + arr30)*/


//Template array assignment test
/*print("" + arr10)
arr10=["hello"]
print("10 " + arr10)
//print("" + arr30)
arr30=arr10
print("30 " + arr30)
var arr40: Template[] = arr20
print("" + arr20)
//var arr50: String[] = arr10 //NOt working
//print("" + arr50)*/

//Template array assignment and operations with variables
/*var a: Int = 1
var b: String ="b"
var d: Float = 3
var e: String=" e"
var c: Template[] = [a,b]
var f: Template[] = [d,e]
var g: Template[] = c@(+)f
print(""+c)
print(""+f)
print(""+g)*/

//Template array assignment and operations with templates variables
/*template<typename T, typename T1>
fun f(arg1: Template[], arg2: T[], arg3:Int[]) : Template[]{
    var c : Template[] = arg1@(+)arg3@(+)arg2
    //print("" +arg2)
    return c
}

var a: Template[] = [1,1,1]//"hello" ]
var b: Template[] = [2,2,2]//"hi"]
var c: Template[] = [1.0,2.0,2.0]//"bye"]
var g: Int[] = [2,3,4]
//print(""+a)
var d: Template[] = f<Template, Template>(c,b,a) //[3,3,3]
var e: Template[] = f<Int, Int>(d,[2,2,2],d)
print(""+d)
print(""+e)*/
//var a: Int = (1+2)+3
//print(""+a)
//print("" +f<Float[], Int[]>(c,a,b))

//fun test (x: String):String { return x+" a" }
//print(test("a"))
//var x : String = test("a")
//var y: String = test(x)
//print(""+x)



//Array operations tests
/*var arrInt: Float[] = [5.0,2]
var arrInt2: Float[] = [2.0,2]
var arr3: Bool[] = [true]*/

//tests
//var str: String = null; return print(str + 1)
//print(""+ (true  && true))
//print(""+(true + 2))
//fun test (x: String):String { return x }
//print(test("a"))

//var a:Template[]=[]

//print(""+([1]@(==)[2]))
//print(""+([1]@(+)[2.0]))
//print(""+([1]@(+)["ello"]))
/*var x: Template[] = []
var a: Template[]= [1,2.0,"hel"]
var b: Template[] =[1,2.0,"lo"]
x=a@(+)b
print(""+x)*/
//TODO
/*template <typename T, typename T1>
fun add (a: T[], b: T1[]): Template[] { return a@(+)b }
var t: Temlate[]= add<Template,Template>([4.0,"h"], [5,"ello"])
print(""+t)*/
/*var x: Template[] = [1,2.0,"hello",true]
print(""+x[0])
print(""+x.length)*/

/*fun add (a: String[], b: String[]): String[] { return a@(-)b }
add(["h"], ["ello"])*/
