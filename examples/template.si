//Basic template param test
template <typename T, typename T1>
fun check_param (r: T, a: T1, b: Int, c: T): T{
    print(a + "")
    return c
}
check_param<Int, String>(2, "hey", 2, 2);
check_param<Float, Int>(2.3, 4, 4, 8.4);
check_param<Int, String>(2, "hey", 2, 2);

template <typename T,typename T1>
fun check_param1 (x: T, y: T1) :T{
    print(y)
    return 2
}
//check_param1<Int, Int>(2, 3);
//check_param<Int, String>(2, "hey", 2, 1);
check_param1<Int, String>(2, "hey");

//no template test (if what already existed is still working)
fun check_param_no_template ( a: String, c: Int, b: Int){
    print(a)
}

//Basic template but not used in the function
template <typename T>
fun check_param_template_not_used ( a: String, c: Int, b: Int){
    print(a)
}

//Template with multiple parameters
template <typename T, typename T1>
fun check_param_multiple_template( a: T, c: T1, b: Int){
}
check_param_multiple_template<String, Int>("hey", 2, 3);

//Test of binary operation with templates
template<typename T1, typename T, typename T2>
fun binary_print2(a: T, x: T1, b: T2, c: T): String{
    print("" + (x + 2))
    print("" + (c && true))
    print("" + b)
    var test: Float = x / b
    print(test + "")
    print("" + (a || c))
    return "" + b
}
binary_print2<Float, Bool, Float>(true, 3.0, 2.0, false)
template<typename T, typename T1>
fun max(a: T, b: T1): T{
    if(a > b){
        return a
    }else{
        return b
    }
}
print("" + max<Float, Int>(4.5, 3))

//Test of var decl + var assignement
template<typename T, typename T1>
fun assign(a: T, b: T1){
    a = 3
    a = a + 1
    var c : Float = a + 1
    print(a)
}
assign<Int, Float>(2, 3.0)
assign<Float, Int>(4.0, 5)

//Test of while loop with template
template<typename T>
fun loop(a: T){
    while(a < 8){
        print(a)
        a = a + 1
    }
}
loop<Int>(5)
loop<Float>(4.7)


//Array operation test
var arr10 : Int[] = [1,2]
var arr20 : Int[]= [2, 3]
var arr30: Bool[]=arr10@(>)arr20
print("111" + arr10)
print("222" + arr30)
var arr80 : Bool[] = [true]
var arr90 : Bool[] = [false]
var arr95 : Bool[] = arr80@(&&)arr90
print("111" + arr80)
print("222" + arr95)

//Template array test
var arr100 : Template[] = [1.0, "Hello"]
var arr200 : Template[]= [2, " everybody"]
var arr300: Template[]=arr100@(>)arr200
print("111" + arr100)
print("222" + arr300)
var arr400 : Template[] = [1.0, "Hello"]
var arr500 : Template[]= [2, " everybody"]
var arr600 : Template[] = [3, " !"]
var arr700: Template[]=arr100@(+)arr200@(+)arr400
print("111" + arr100)
print("222" + arr300)


//Template array assignment test
print("" + arr10)
arr10=[23, 150]
print("" + arr10)
print("" + arr30)
var arr450: Template[] = arr20
print("" + arr450)

//Template array assignment and operations with variables
var a: Int = 1
var b: String ="b"
var d: Float = 3
var e: String=" e"
var c: Template[] = [a,b]
var f: Template[] = [d,e]
var g: Template[] = c@(+)f
print(""+c)
print(""+f)
print(""+g)

//Template array assignment and operations with templates variables
template<typename T, typename T1>
fun farr(arg1: Template[], arg2: T[], arg3:Int[]) : Template[]{
    var darr : Template[] = arg1@(+)arg3
    //print("" +arg2)
    return darr
}
var aarr: Template[] = [1,1,1]
var barr: Template[] = [2,2,2]
var carr: Template[] = [1.0,2.0,2.0]
farr<Template, Template>(carr,barr,aarr)



//test list as type in template function
template <typename T>
fun listTest2(a: T[], b: T[]): T[]{
    var d : Template[] = [3, 5]
    var c : Template[] = a@(*)d//d[0]//@(*)d
    //print("" +c)
    return c
}
var l: Int[] = [2, 4]
var l2: Int[] = [3, 4]
listTest2<Template>(l, l2)

var ltemp: Template[] = [2, 4]
var ltemp2: Template[] = [3, 4]
listTest2<Template>(ltemp, ltemp2)


//Test Template structures

template<typename T>
struct Pair {
    var a: T
    var b: T
}

var pair: Pair = $Pair<Int>(4,5)
var pair2: Pair= $Pair<Int>(3,5)
print((pair.a + pair.b) + "")
if(pair.a > 3){
    print("hey")
}
pair.a = 6

// Test assignement structure
var cpair : Int = pair.a
var dpair : Int = 8

while(pair.a < 3){
    print("hey")
    pair.a = 6
}

