
1. add numbers to the template name so that we can use T1, T2, T3 -OK
2. create templates for a list of functions declarations


Problemes:

-  modify scope during funcall to reassign the type of a vairable declared in funDecl -> impossible for now
-  and check in semantic analysis all errors related to template types
-  declare templates typenames not used -> error -> OK BUT doesn't stop the walker if triggers the error, do we have to check every time if they are null statement???
-  function f -> error
-  failureInput("template <typename T,typename T1> fun f (x: T):T { return x}; f<Int> (2)");
-  2 successive call to fun_param1 fail
    successInput("template <typename T,typename T1> fun f (x: T1, y:T, z:Int, a: T1):T { return x}; f<Int,Int>(1,2,3,4)") ;
    successInput("template <typename T> fun f2 (x: T) {} ; f2<String> (\"hey\")" );//+ -> OK
- Array template are ArrayType so have to check this in addition to "if instance of TemplateType"
- return element should not be template (do the same as in binary operator) -> done
- assignement should not be template (do the same as in binary operator) -> done 
- var declaration should not be template (do the same as in binary operator) -> done
- field declaration should not be template (do the same as in binary operator)
- if/while statement should not be template (do the same as in binary operator)
- Division of 2 int casted to float does not give the right anwser
- recheck interpretor try and catch

- verify ArrayType templatename utility
- check array with templates
- array variables name must be unique
- operation between full and empty array is empty

Question:
- Working with struct ??


Important files:
- semantic analysis
- sigh grammar
- all ast implementing declaration node
- Templatetype
- tests
- examples