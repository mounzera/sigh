//Basic template param test
/*template <typename T, typename T1>
fun check_param (r: T, a: T1, b: Int, c: T){
    print(a)
}
check_param<Int, String>(2, "hey", 2, 2);
//check_param<Int, String>(2, "hey", 2, 2);

template <typename T,typename T1>
fun check_param1 (x: T, y: T1) :T{
    print(y)
    return 2
}
//check_param1<Int, Int>(2, 3);
//check_param<Int, String>(2, "hey", 2, 1);
check_param1<Int, String>(2, "hey");

//no template test (if what already existed is still working)
fun check_param_no_template ( a: String, c: Int, b: Int){
    print(a)
}

//Basic template but not used in the function
template <typename T>
fun check_param_template_not_used ( a: String, c: Int, b: Int){
    print(a)
}

//Template with multiple parameters
template <typename T, typename T1>
fun check_param_multiple_template( a: T, c: T1, b: Int){
}
check_param_multiple_template<String, Int>("hey", 2, 3);*/

/*var intArray: Int[] = [5]
fun array_print_int(x: Int[]){
    print("" + x[0])
}
array_print_int(intArray)*/

/*template <typename T, typename T1>
fun array_print(b: T1, a: T){

}
array_print<Int, Int>(3, 2)*/

/*var tempArray: T1[] = []
var tempArray: T1[] = [6]*/

/*template<typename T>
fun array_print(x: T[]){
}
var intArray: Int[] = [5]
array_print<Int>(intArray)*/

//template<typename T1>
fun array_print2(x: T1){
    var b: Int = x + 1
}
var stringArr: String[] = ["hey"]
array_print2<Int>(2)


/*fun test(a: String){
    print(a)
}
test("2")
test("3")*/